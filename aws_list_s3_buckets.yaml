# Example automation: List S3 buckets and send a notification with the results
#
# This automation demonstrates:
# 1. Triggering the AWS boto3 service to list S3 buckets
# 2. Waiting for the response using a correlation ID
# 3. Processing the response and sending a notification
#
# To use this automation:
# 1. Copy this file to your /config/automations/ directory
# 2. Adjust the notification service as needed for your setup
# 3. Trigger the automation via the UI or another automation

alias: "AWS: List S3 Buckets"
description: "Lists all S3 buckets and sends a notification with the results"
trigger:
  # This is just an example trigger - you can replace with any trigger you prefer
  - platform: time_pattern
    hours: "12"
    minutes: "0"
    seconds: "0"
    
  # Alternative manual trigger via a script or event
  - platform: event
    event_type: list_s3_buckets_request
    
action:
  # Step 1: Generate a unique correlation ID
  - variables:
      correlation_id: "{{ now().strftime('%Y%m%d%H%M%S') }}_s3_buckets"
      
  # Step 2: Call the AWS boto3 service to list S3 buckets
  - service: aws.boto3
    data:
      client: "s3"
      method: "list_buckets"
      sync: true
      correlation_id: "{{ correlation_id }}"
  
  # Step 3: Wait for the response from AWS
  - wait_for_trigger:
      - platform: event
        event_type: aws_boto3_response
        event_data:
          correlation_id: "{{ correlation_id }}"
    timeout:
      seconds: 30
    continue_on_timeout: false
    
  # Step 4: Store the trigger result for processing
  - variables:
      result: "{{ wait.trigger.event.data }}"
      
  # Step 5: Check if there was an error in the response
  - if:
      - condition: template
        value_template: "{{ 'error' in result }}"
    then:
      - service: persistent_notification.create
        data:
          title: "AWS S3 Bucket List Error"
          message: "Failed to list S3 buckets: {{ result.error }}"
    else:
      # Step 6: Process the bucket list and send notification
      - variables:
          bucket_list: >
            {% set buckets = result.response.Buckets | map(attribute='Name') | list %}
            {% if buckets | length > 0 %}
              - {{ buckets | join("\n- ") }}
            {% else %}
              No buckets found.
            {% endif %}
            
      - service: persistent_notification.create
        data:
          title: "AWS S3 Bucket List"
          message: |
            S3 Buckets:
            {{ bucket_list }}
          
      # Optional: Log the result to Home Assistant logs
      - service: system_log.write
        data:
          message: "S3 Buckets listed successfully: {{ result.response.Buckets | map(attribute='Name') | list }}"
          level: info

mode: single 